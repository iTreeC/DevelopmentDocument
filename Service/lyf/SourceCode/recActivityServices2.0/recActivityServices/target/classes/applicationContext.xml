<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://www.springframework.org/schema/aop 
       http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<context:annotation-config />
	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.position.dao.impl,com.posistion.service.impl" />

	<!-- 导入资源文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="location" value="classpath:dbconfig.properties" />
	</bean>

	<!-- c3p0数据源 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${hibernate.connection.driver_class}" />
		<property name="jdbcUrl" value="${hibernate.connection.url}" />
		<property name="user" value="${hibernate.connection.username}" />
		<property name="password" value="${hibernate.connection.password}" />
		<property name="initialPoolSize" value="${hibernate.connection.initialPoolSize}" />
		<property name="minPoolSize" value="${hibernate.connection.minPoolSize}" />
		<property name="maxPoolSize" value="${hibernate.connection.maxPoolSize}" />
		<!-- <property name="preferredTestQuery" value="select 1 from dual " /> -->
	</bean>

	<!-- 配置 Hibernate 的 SessionFactory 实例: 通过 Spring 提供的 LocalSessionFactoryBean 
		进行配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<!-- 配置数据源属性 -->
		<property name="dataSource" ref="dataSource" />

		<!-- 指定命名策略，例如相同的类名和表名自动建立上对应关系 -->
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>

		<!-- 使用 hibernateProperties 属相来配置 Hibernate 原生的属性 -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<!-- 指定自动扫描包,配置自动扫描包下的实体，也可使用annotatedClasses属性进行单个实体配置 -->
		<property name="annotatedClasses">
			<list>
				<value>com.position.pojo.CityNumber</value>
				<value>com.position.pojo.Company</value>
				<value>com.position.pojo.CompanyCoordinate</value>
				<value>com.position.pojo.CompanyPosition</value>
				<value>com.position.pojo.ProvincialNumber</value>
			</list>
		</property>
	</bean>


	<!-- 事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>
